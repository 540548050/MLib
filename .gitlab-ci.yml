variables:
  # 用于预览的域名
  AUTO_DEVOPS_DOMAIN: fintechgo.com
  # 不带标签的镜像仓库地址 这里要改成你的镜像地址（或者修改react-mobx为项目名）
  CI_REGISTRY_IMAGE: harbor.bdfint.com/bd/$CI_PROJECT_PATH_SLUG

image: modules/kubectl

stages:
  - prepare
  - compile
  - build
  - test
  - review
  - staging
  - production
  - cleanup

cache:
  paths:
    - node_modules/

# 安装依赖
prepare:
  stage: prepare
  image: node:alpine
  script:
    - yarn --version
    - yarn
  only:
    - branches
# npm 打包
compile:
  stage: compile
  image: node:alpine
  script:
    #    - yarn start
    #    - yarn test
    # 改为测试环境
    - yarn build
  only:
    - branches
  artifacts:
    paths:
      - build

build:
  stage: build
  image: docker
  services:
    - docker:dind
  script:
    - build
  only:
    - branches

# 预览分支
review:
  stage: review
  variables:
    BACKEND: https://secjy.zsteel.cc #10.82.12.63
  script:
    - deploy
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_SLUG.$AUTO_DEVOPS_DOMAIN
    on_stop: stop_review
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master

# 停止预览
stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master

# Keys that start with a dot (.) will not be processed by GitLab CI.
# Staging and canary jobs are disabled by default, to enable them
# remove the dot (.) before the job name.
# https://docs.gitlab.com/ee/ci/yaml/README.html#hidden-keys

# Staging deploys are disabled by default since
# continuous deployment to production is enabled by default
# If you prefer to automatically deploy to staging and
# only manually promote to production, enable this job by removing the dot (.),
# and uncomment the `when: manual` line in the `production` job.

staging:
  stage: staging
  variables:
    BACKEND: https://secjy.zsteel.cc
  script:
    - deploy
  environment:
    name: staging
    url: http://$CI_PROJECT_PATH_SLUG-staging.$AUTO_DEVOPS_DOMAIN
  only:
    refs:
      - master
    kubernetes: active

# This job continuously deploys to production on every push to `master`.
# To make this a manual process, either because you're enabling `staging`
# or `canary` deploys, or you simply want more control over when you deploy
# to production, uncomment the `when: manual` line in the `production` job.

production:
  stage: production
  variables:
    BACKEND: https://jy.zsteel.cc
  script:
    - deploy
  environment:
    name: production
    url: http://$CI_PROJECT_PATH_SLUG.$AUTO_DEVOPS_DOMAIN
  artifacts:
    paths:
      - deployment.yaml
  when: manual
  only:
    refs:
      - master
    kubernetes: active

# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA

  function deploy() {
    create_kubeconfig
    ensure_namespace
    app="$CI_ENVIRONMENT_SLUG"
    name="$CI_ENVIRONMENT_SLUG"
    replicas="${REPLICAS-1}"
    hostname=${CI_ENVIRONMENT_URL/http*:\/\//}

    # export env for envsubst
    export CI_KUBE_APP=$app
    export CI_KUBE_NAME=$name
    export CI_KUBE_ENV=${CI_ENVIRONMENT_NAME/\/*/}
    export CI_KUBE_BACKEND=$BACKEND
    export CI_KUBE_REPLICAS=$replicas
    export CI_KUBE_HOSTNAME=$hostname
    export CI_KUBE_IMAGE=$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG

    echo "$CI_KUBE_NAME, $CI_KUBE_REPLICAS, $CI_KUBE_IMAGE, $CI_KUBE_HOSTNAME"

    echo "正在创建 deployment.yaml ..."
    # cat <<EOF | kubectl apply -n $KUBE_NAMESPACE --force -f -
    # envsubst < deployment.yaml | kubectl apply -n $KUBE_NAMESPACE --force -f -
    envsubst < .deployment.yaml > "deployment.yaml"
    cat "deployment.yaml"

    echo "正在部署..."
    kubectl apply -n $KUBE_NAMESPACE --force -f "deployment.yaml"
    # 取消阻塞 直接创建下一个服务
    # kubectl rollout status -n "$KUBE_NAMESPACE" -w "deployment/$CI_KUBE_NAME"
  }

  function ensure_namespace() {
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
    # 在当前命名空间中生成 secret
    kubectl describe secret harbor -n "$KUBE_NAMESPACE" || kubectl get secret harbor -o yaml -n bigdata | sed "s/bigdata/${KUBE_NAMESPACE}/g" | kubectl -n "$KUBE_NAMESPACE" create -f -
  }

  function build() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        echo '设置 DOCKER_HOST=tcp://localhost:2375'
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo ""
    fi

    echo "正在发布到镜像仓库..."
    export CI_KUBE_IMAGE=$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG

    if [[ -f Dockerfile ]]; then
      echo "准备打包镜像 $CI_KUBE_IMAGE ..."
      docker build -t "$CI_KUBE_IMAGE" .
      echo "准备发布到镜像仓库 $CI_KUBE_IMAGE..."
      docker push "$CI_KUBE_IMAGE"
      docker rmi "$CI_KUBE_IMAGE"
    fi
    echo ""
  }

  function delete() {
    echo "准备删除旧的部署..."
    create_kubeconfig
    name="$CI_ENVIRONMENT_SLUG"

    kubectl delete all,ing -l "name=$name" -n "$KUBE_NAMESPACE"
  }

  create_kubeconfig() {
    # [[ -z "$KUBE_URL" ]] && return

    # echo "正在生成 kubeconfig..."
    # export KUBECONFIG="$(pwd)/kubeconfig"
    # export KUBE_CLUSTER_OPTIONS=
    # if [[ -n "$KUBE_CA_PEM" ]]; then
    #   echo "正在生成认证文件 $(pwd)/kube.ca.pem..."
    #   echo "$KUBE_CA_PEM" > "$(pwd)/kube.ca.pem"
    #   export KUBE_CLUSTER_OPTIONS=--certificate-authority="$(pwd)/kube.ca.pem"
    # fi
    # kubectl config set-cluster gitlab-deploy --server="$KUBE_URL" $KUBE_CLUSTER_OPTIONS
    # kubectl config set-credentials gitlab-deploy --token="$KUBE_TOKEN" $KUBE_CLUSTER_OPTIONS
    # kubectl config set-context gitlab-deploy --cluster=gitlab-deploy --user=gitlab-deploy --namespace="$KUBE_NAMESPACE"
    # kubectl config use-context gitlab-deploy
    echo "kubectl config"
  }

before_script:
  - *auto_devops
