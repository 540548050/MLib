variables:
  # 用于预览的域名
  AUTO_DEVOPS_DOMAIN: bdfint.cn
  # 不带标签的镜像仓库地址，用于推送镜像 （可以修改$CI_PROJECT_PATH_SLUG为你的项目名）
  CI_REGISTRY_IMAGE: ${CI_REGISTRY}/${CI_REGISTRY_USER}/${CI_PROJECT_PATH_SLUG}

  # fin.bdfint.cn
  PROJECT_URL_PREFIX: react-boilerplate
  PROJECT_GROUP_NAME: react-boilerplate

image: modules/kubectl

stages:
  - build
  - review
  - production
  - cleanup

build:
  stage: build
  variables:
    DOCKER_DRIVER: overlay
  image: docker:stable
  services:
    - docker:dind
  script:
    - build
  only:
    - branches

# 预览分支
review:
  stage: review
  variables:
    KUBE_NAMESPACE: dev-${PROJECT_GROUP_NAME}
  script:
    - deploy
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://${PROJECT_URL_PREFIX}-${CI_COMMIT_REF_SLUG}.review.${AUTO_DEVOPS_DOMAIN}
    on_stop: stop_review
  artifacts:
    paths:
      - "*.yaml"
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - dev
    - master

# 停止预览
stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
    KUBE_NAMESPACE: dev-${PROJECT_GROUP_NAME}
  script:
    - delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - dev
    - master

review-dev:
  stage: review
  variables:
    KUBE_NAMESPACE: dev-${PROJECT_GROUP_NAME}
  script:
    - deploy
  environment:
    name: dev
    url: http://${PROJECT_URL_PREFIX}.dev.${AUTO_DEVOPS_DOMAIN}
  artifacts:
    paths:
      - "*.yaml"
  only:
    refs:
      - dev
    kubernetes: active

review-test:
  stage: review
  variables:
    KUBE_NAMESPACE: test-${PROJECT_GROUP_NAME}
  script:
    - deploy
  environment:
    name: test
    url: http://${PROJECT_URL_PREFIX}.test.${AUTO_DEVOPS_DOMAIN}
  artifacts:
    paths:
      - "*.yaml"
  # when: manual
  only:
    refs:
      - master
    kubernetes: active

# 阿里云
production:
  stage: production
  variables:
    DOCKER_DRIVER: overlay
  image: docker:stable
  services:
    - docker:dind
  script:
    echo 'production'
    # - docker login -u "$CI_REGISTRY_USER_ALIYUN" -p "$CI_REGISTRY_PASSWORD_ALIYUN" "$CI_REGISTRY_ALIYUN"
    # - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA ${CI_REGISTRY_IMAGE_ALIYUN}:prod
    # - docker push ${CI_REGISTRY_IMAGE_ALIYUN}:prod
    # trigger
    # - wget -O /dev/null -q '$CI_ALIYUN_PRODUCTION_TRIGGER'
  environment:
    name: production
    url: https://${PROJECT_URL_PREFIX}.zsteel.cc
  when: manual
  only:
    refs:
      - master
    kubernetes: active
# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  function deploy() {
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
    # 在当前命名空间中生成 secret
    kubectl describe secret bdfint -n "$KUBE_NAMESPACE" || kubectl get secret bdfint -o yaml -n default | sed "s/default/${KUBE_NAMESPACE}/g" | kubectl -n "$KUBE_NAMESPACE" create -f -
    # frontend
    helm template helm \
      --namespace="$KUBE_NAMESPACE" \
      --name="$CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_SLUG" \
      --set image.repository="$CI_REGISTRY_IMAGE" \
      --set image.tag="$CI_COMMIT_SHA" \
      --set ingress.hosts[0]="${CI_ENVIRONMENT_URL/http*:\/\//}" \
      > frontend-deploy.yaml
    cat frontend-deploy.yaml
    kubectl apply --namespace="$KUBE_NAMESPACE"  -f frontend-deploy.yaml
  }
  function build() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        echo '设置 DOCKER_HOST=tcp://localhost:2375'
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    fi

    if [[ -f Dockerfile ]]; then
      docker build --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
      docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    fi
  }
  function delete() {
    echo "准备删除旧的部署..."
    kubectl delete --namespace="$KUBE_NAMESPACE"  -f frontend-deploy.yaml
  }

before_script:
  - *auto_devops
