variables:
  # 开发测试环境域名
  AUTO_DEVOPS_DOMAIN: bdfint.cn
  # 生产环境域名
  AUTO_DEVOPS_DOMAIN_ALIYUN: zsteel.cc
  # 不带标签的镜像仓库地址，用于推送镜像 （可以修改$CI_PROJECT_PATH_SLUG为你的项目名）
  CI_REGISTRY_IMAGE: ${CI_REGISTRY}/fed/${CI_PROJECT_PATH_SLUG}
  CI_REGISTRY_IMAGE_ALIYUN: ${CI_REGISTRY_ALIYUN}/bdfint/react-boilerplate

  # 项目的域名名称前缀 *.stable-dev.bdfint.cn *.stable-test.bdfint.cn *.zsteel.cc
  PROJECT_URL_PREFIX: react-boilerplate
  # 项目组的英文名称（方便查看和调试等）
  PROJECT_GROUP_NAME: fed

  # 项目组/项目变量 (Settings -> CI/CD -> Variables)
  # CI_REGISTRY 本地 docker 仓库
  # CI_REGISTRY_USER
  # CI_REGISTRY_PASSWORD
  # CI_REGISTRY_ALIYUN 阿里云 docker 仓库
  # CI_REGISTRY_USER_ALIYUN
  # CI_REGISTRY_PASSWORD_ALIYUN
  # CI_REGISTRY_TRIGGER_ALIYUN 项目阿里云发布触发地址 [项目唯一]

image: modules/kubectl:docker

stages:
  - build
  - review
  - staging
  - production
  - cleanup

build:
  stage: build
  variables:
    DOCKER_DRIVER: overlay
  image: docker:stable
  script:
    - build
  only:
    refs:
      - dev
      - master

# 预览 dev
review_dev:
  stage: review
  variables:
    GIT_STRATEGY: none
    KUBE_NAMESPACE: dev-${PROJECT_GROUP_NAME}
    REPOSITORY: $CI_REGISTRY_IMAGE
  script:
    - deploy
  environment:
    name: dev
    url: http://${PROJECT_URL_PREFIX}.stable-dev.${AUTO_DEVOPS_DOMAIN}
    on_stop: stop_review_dev
  artifacts:
    paths:
      - "*.yaml"
  only:
    refs:
      - dev
    kubernetes: active

# 预览 test
review_test:
  stage: review
  variables:
    GIT_STRATEGY: none
    KUBE_NAMESPACE: test-${PROJECT_GROUP_NAME}
    REPOSITORY: $CI_REGISTRY_IMAGE
  script:
    - deploy
  environment:
    name: test
    url: http://${PROJECT_URL_PREFIX}.stable-test.${AUTO_DEVOPS_DOMAIN}
    on_stop: stop_review_test
  artifacts:
    paths:
      - "*.yaml"
  only:
    refs:
      - master
    kubernetes: active

# 停止预览 dev
stop_review_dev:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
    KUBE_NAMESPACE: dev-${PROJECT_GROUP_NAME}
  script:
    - delete
  environment:
    name: dev
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - dev
    kubernetes: active

# 停止预览 test
stop_review_test:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
    KUBE_NAMESPACE: test-${PROJECT_GROUP_NAME}
  script:
    - delete
  environment:
    name: test
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - master
    kubernetes: active

# 阿里云灰度
staging:
  stage: staging
  variables:
    GIT_STRATEGY: none
    KUBE_NAMESPACE: staging-${PROJECT_GROUP_NAME}
    REPOSITORY: $CI_REGISTRY_IMAGE_ALIYUN
    KUBE_CONFIG: $KUBE_CONFIG_ALIYUN
  script:
    # 推送镜像到阿里云
    - docker_aliyun
    - kubectl_aliyun
    - deploy
  environment:
    name: staging
    url: https://${PROJECT_URL_PREFIX}.${AUTO_DEVOPS_DOMAIN_ALIYUN}
  artifacts:
    paths:
      - "*.yaml"
  when: manual
  only:
    refs:
      - master
    kubernetes: active

# 阿里云生产
production:
  stage: production
  variables:
    GIT_STRATEGY: none
    KUBE_NAMESPACE: $PROJECT_GROUP_NAME
    REPOSITORY: $CI_REGISTRY_IMAGE_ALIYUN
    KUBE_CONFIG: $KUBE_CONFIG_ALIYUN
  script:
    - kubectl_aliyun
    - deploy
  environment:
    name: production
    url: https://${PROJECT_URL_PREFIX}.${AUTO_DEVOPS_DOMAIN_ALIYUN}
  artifacts:
    paths:
      - "*.yaml"
  when: manual
  only:
    refs:
      - master
    kubernetes: active
  dependencies:
    - staging

# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  function build() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    fi

    if [[ -f Dockerfile ]]; then
      docker build --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
      docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    fi
  }
  function deploy() {
    helm template helm \
      --namespace="$KUBE_NAMESPACE" \
      --name="$CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_SLUG" \
      --set image.repository="$REPOSITORY" \
      --set image.tag="$CI_COMMIT_SHA" \
      --set ingress.hosts[0]="${CI_ENVIRONMENT_URL/http*:\/\//}" \
      > deployment.yaml
    cat deployment.yaml
    kubectl apply --namespace="$KUBE_NAMESPACE"  -f deployment.yaml
  }
  function delete() {
    echo "准备删除旧的部署..."
    kubectl delete all,ing --all --namespace=$KUBE_NAMESPACE
  }
  function docker_aliyun() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry $CI_REGISTRY with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    fi
    if [[ -n "$CI_REGISTRY_USER_ALIYUN" ]]; then
      echo "Logging to GitLab Container Registry $CI_REGISTRY_ALIYUN with CI credentials..."
      docker login -u "$CI_REGISTRY_USER_ALIYUN" -p "$CI_REGISTRY_PASSWORD_ALIYUN" "$CI_REGISTRY_ALIYUN"
    fi

    docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # 推送镜像到阿里云
    docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE_ALIYUN:$CI_COMMIT_SHA
    docker push $CI_REGISTRY_IMAGE_ALIYUN:$CI_COMMIT_SHA
  }
  function kubectl_aliyun() {
    mkdir .kube && echo -n $KUBE_CONFIG | base64 -d > .kube/config
  }

before_script:
  - *auto_devops
